name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ master, github-actions ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-docker-backend:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: actions/checkout@v2
      -
        name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: './backend/Dockerfile'
          push: false
          tags: sylflo/renting-backend:latest

  # build-docker-admin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - uses: actions/checkout@v2
  #     -
  #       name: Build
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: './admin/Dockerfile'
  #         push: false
  #         tags: sylflo/renting-admin:latest

  # build-and-push-docker-admin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     -
  #       name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     -
  #       name: Build 
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: './admin/Dockerfile'
  #         push: true
  #         tags: sylflo/renting-admin:latest # tags strategy
  #         # https://docs.docker.com/ci-cd/github-actions/#push-tagged-versions-to-docker-hub
  # eslint-backend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Runs eslint
  #       run: |
  #         cd backend
  #         npm i eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
  #         npx eslint --max-warnings=0 ./src --ext .js,.jsx,.ts,.tsx
  # eslint-admin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Runs eslint
  #       run: |
  #         cd admin
  #         npm i eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
  #         npx eslint --max-warnings=0 ./src --ext .js,.jsx,.ts,.tsx

  # prettier-backend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Runs prettier
  #       run: |
  #         cd backend
  #         npx prettier --check ./src

  # prettier-admin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Runs prettier
  #       run: |
  #         cd admin
  #         npx prettier --check ./src

  # hadolint-backend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: brpaz/hadolint-action@v1.2.1
  #       with:
  #         dockerfile: ./backend/Dockerfile

  # hadolint-admin:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: brpaz/hadolint-action@v1.2.1
  #       with:
  #         dockerfile: ./admin/Dockerfile
